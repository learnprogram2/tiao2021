


介绍自己: = 你的价值, 为公司你解决什么问题？
What in it for them.

success: I have been xxx
strength: 强项, 擅长.
situation: 应用上面的应用在当前: what i am looking for is xxx 怎样在当前工作上xxxx.




### 个人情况
1. 工作角色是什么, 如何学习?


### 项目相关
1.

#### 1. 积分商城项目

#### 2. live-live高可用项目













### Java相关
1. 线程池有哪些常用的? 适用场景是什么?
    1. 定时检查的这种使用频率不高的任务: Timer, 用一个线程+DelayQueue(PriorityQueue)实现的
    2. 普通的多线程场景: ThreadPool, 7参数的: 核心线程, 最大线程数, keepalive时间+unit, 任务队列, 线程工厂, 拒绝策略.
    3. 多个定时任务, 可以用Timer的多线程版, 线程池+DelayQueue.
    4. Cache模式的线程池, 使用SynchronizedQueue, 提交任务必须有线程对接. 线程容易飙升.
2. 延迟队列的实现方式:
    1. 最小堆+JUC的lock组件: DelayQueue
    2. 时间轮:
    3. 跳表: redis的zset
    4. 分桶有序排队策略: 支持特定的延时时间段, RocketMQ的延迟队列. 设计简单
4. Kafka和Netty的时间轮实现有什么区别?
    Kafka采用多级轮, 使用DelayQueue存储轮cell, 减少了遍历次数.
    Netty采用单轮+轮数
5. JVM内存分配, 执行原理, 类加载过程
    内存分配: Heap, 虚拟机栈, 元数据区, 本地方法栈, 程序技术区.
        Heap: 存储所有的对象, 字符串常量
        虚拟机栈: 存储线程执行的私有数据, 对象指针, 表.
        元数据区: 存放在本地内存, 不属于JVM内, 存储常量, class对象..
        本地方法栈+程序计数区: native线程的栈, 线程执行进度.

    类加载过程: 加载(加载文件, 创建class对象) -> 验证(class文件规范) -> 准备:类变量分配空间, 初始null值 -> 解析:修改符号引用到直接引用 -> 初始化:创建对象 -> 使用 -> 卸载

6. 常用GC收集器? 用的什么? 对CMS有优化么? G1的工作原理?
    常用GC收集器:
        单线程: serial, serialOld
        多线程: parNew, parOld
        复合: CMS, G1
    使用: CMS+ParNew 一个组合, 或者G1
    CMS原理和优化:
        四个阶段:
            初始标记: STW, GCroot找到所有直接引用的
            并发标记: 对老年代所有对象进行gcRoot追踪
            重新标记: STW, 对第二阶段的新对象, 进行gcRoot追踪
            并发清除: 很耗时
        优化:
            取消每次FullTC的内存碎片整理: -XXCMSFullGCsBeforeCompaction=5 5次一整理
            ???
    G1的工作原理:
        雷同CMS的分代策略, 只是分region, 128mb一个, region可以动态规划到新生代, 老年代.
        通过region的区分, 可以做到预估回收的效率和价值, 做到可控STW.
        回收流程类似CMS, 使用复制算法. 而不是标记清除算法.

7. 线上机器CPU负载过高如何排查? 如何优化JVM参数
    CPU排查:
        1. 先Top查看cup最高的进程, 然后top-H查看进程占用CPU最高的线程.
        2. 使用jps查看jvm的线程状态, 使用jstack查看线程栈信息, 对应代码看一下瓶颈在哪里.
    JVM参数优化:
        1. 先找到JVM的瓶颈, 高峰时候可以用jps每秒输出, 查看各个区域的内存变化, 来估算瓶颈在哪里.
        2. 找到瓶颈后, 对应的, 把内存各个区域的大小和比例调整一下, 然后如果有GC问题就调整一下GC的清理要求, 别搞太多的损耗.
        3. 如果有OOM问题, 就dump出来, MAT分析一下, 查看堆栈和对象都是什么.

8. 线上机器不断FullGC, 如何排查?
    先用jps看对象生成速率, 和Heap各区域之间的对象满的情况
    调整各区域大小, 或者是dump一下, 看一下都是什么对象, 对照业务, 看一下如何优化.

9. 线上OOM情况? 如何排查?
    Flink平台的大state, 会因为申请堆外内存过多, 被K8s杀掉. 要调整k8s.

10. 如何让Metaspace区OOM?
    很难, 因为挪到了内存里面.
    循环创建class对象可能可以. Metaspace的空间占用达到了设定的最大值就会fullGC.

11. JVM优化? 优化点有哪些? 如何考虑?


12. Tomcat非阻塞协议和阻塞协议的区别

13. Nio的底层原理? 系统epoll是如何实现的?
    Nio底层依赖操作系统的多路复用IO实现, 多路复用属于同步阻塞IO, 内核同步响应数据, 进程阻塞收取, 但是多路复用可以极大提高收发包效率.
    操作系统有5中IO模型:
        1. 阻塞IO: 单个文件要一个线程, 阻塞同步拿数据.
        2. 非阻塞IO: 单线程要轮询拿取, 同步非阻塞.
        3. 多路复用: 内核同步读写, 阻塞拿去, 但是一个selector维护多个文件.
            实现: select, poll, epoll.
                select有fd大小限制, poll链表实现突破限制. epoll在fd就绪时候会到一个就绪链表里, 避免遍历所有fd.
                网卡写入数据帧, 硬中断cpu, cpu软中断使用内核线程收数据, 然后解析TCP, 查找socket, 唤醒socket的等待队列函数, 就是epoll函数
                epoll函数把socket放在epoll的就绪队列里, selector遍历时候就会被唤醒.
        4. 信号驱动IO
        5. 异步IO: 异步回调.

14. Nio是边缘触发还是水平触发?
    Java Nio水平触发: 只要满足, 不断地触发时间
    水平触发: level-trigger, 信号只需要满足条件, 就一直会触发.
        epoll是以缓冲区空满状态来判断水平触发条件. 如果缓冲区有数据, 就一直触发读事件. 只要缓冲区还不满, 就一直触发写事件.
    边缘触发: edge-trigger, 当状态边缘变化时候触发一个事件.
        Linux的epoll也支持边缘触发, 在文件就绪时候, 会叫醒epoll的selector

15. Nio的epoll实现, 如何打断一个select()方法?
    wakeup()

16. 什么场景下使用DirectBuffer? 使用Heap去进行IO读写时, 为什么申请临时的DirectBuffer进行数据拷贝?
    需要和内核打交道的时候, 使用DirectBuffer会减少一次内存拷贝. HeapBuffer要多做一次, 而且增加GC压力.

17. Nio的零拷贝如何实现?
    JavaNino零拷贝, fileChannel的的transferTo()基于sendfile实现, mmap适合小数据量读写, 直接在内核操作.
    sendfile还可以利用DMA来优化, 减少拷贝次数.

18. 单例模式double check时候的volatile的作用是?
    防止指令重排, 因为在synchronized里面还是会发生指令重排的.
    volatile加入loadstore写屏障, 实现了有序性. 可见性也保证了.

19. 讲一下synchronized锁升级?
    早期的synchronized都是重量锁.
    1. 偏向锁:
    2. 轻量级锁:
    3. 自旋优化:
    4. 重量级锁:

20. synchronized保证可见性:
    monitorenter, 集成了内存屏障.
    load(refresh), store(flush) 内存屏障, 拿到最新数据
    acquire, release屏障禁止读/写和读写重排

21. 并发编程时, wait()调用要放在while()循环里?  什么情况会造成假唤醒?
        while (product >=1) {
            try {
                this.wait();
            }
        }
        while 保证唤醒之后, 如果不满足条件还会睡过去. 避免假唤醒.
        假唤醒就是醒来发现, 没有满足条件, 白干活, 如果没处理还会造成数据不一致.

22. HashMap如何解决Hash冲突?
    首先 hashMap对hash算法进行散列, 使用前后16位的亦或来分散.
    如果hashMap的hash冲突, 会用单向链表, 避免扩容使用头插法死循环, 换用拆分链表.


### 微服务
1. 你们的系统如何设计, 为什么要重构为微服务架构?
    系统最初就是javaWeb项目的三层架构: UI层(MVC), 业务层(Service), 数据库层(DAO)
    spring-MVC, spring, MyBatis技术栈开发.
    但单体项目开发到后面太复杂了, 不能满足敏捷开发, 多个人业务分工, 还有业务的单独需求(有的需要高并发, 有的没必要).
    就进行业务拆分, 拆分成多个子服务, 通过RPC框架联合成有机的一个微服务架构. 并在多个部门之间通过分布式中间件, 搭建起庞大的微服务生态系统, 满足业务需求.
    所以主要是 为了突破单体项目局限, 满足多团队敏捷开发, 和多业务的需求.

2. 微服务框架用的是什么? 为什么选择这个?
    我们用的spring-cloud, 主要是生态比较好, 除了基础的RPC功能外, 还有最初的netflix体系, 整合了微服务里面的负载均衡, 注解式调用, 限流熔断, 注册发现等内容.
    dubbo作为一个分布式服务框架, 需要自己定制很多, 所以以后有转spring-cloud-alibaba体系.
    因为微服务主要是开发业务的, 其他各种功能主要考虑方便和可靠的均衡, 如果是单纯的rpc调用的话, 用grpc比较好, 比如我们之前的文件存储系统和注册中心系统, 都是通过grpc互相调用的, ProtoBuf序列化协议比较快.
        事实上eureka用的是一个restful的框架jerssy, 适合就好. 方便, 功能合适.
    dubbo vs spring-cloud: Dubbo 是 SOA(service oriented architecture) 时代的产物, 它的关注点主要在于服务调用, 流量分发, 流量监控和熔断.
        Spring Cloud 诞生于微服务架构时代, 考虑的是微服务治理的方方面面, 另外由于依托Spring, Spring Boot 的优势之上, Dubbo 定位服务治理 属于 Spring Cloud 生态体系里面

    单片架构类似于大容器，其中应用程序的所有软件组件组装在一起并紧密封装。
    一个面向服务的架构是一种相互通信服务的集合。通信可以涉及简单的数据传递，也可以涉及两个或多个协调某些活动的服务。
    微服务架构是一种架构风格，它将应用程序构建为以业务域为模型的小型自治服务集合。

3. 服务化之后, 会遇到什么样的问题? 解决方案是什么?
    微服务架构主要遇到的是共享数据的问题.
    1. 技术门槛高, 复杂性增加: 服务描述, 注册中心, 服务框架, 服务监控, 服务追踪, 服务治理等几大基本组件
    2. RPC 依赖网络IO调用的不确定性: 限流, 降级, 熔断.
    3. 分布式共享数据的一致性问题: 分布式事务, 分布式锁.
    4. 服务治理, 依赖的传递性: spring-cloud-admin-portal 治理.

4. 你们的系统中, 限流熔断组件时用的是什么? 网关用的是什么? 说一下请求流程?
    用的Hystrix小刺猬, 他是circubreaker+workPool的实现
    网关用的zuul, 就是web容器的filter实现, 加上了eureka+hystrix+ribbon把流量均衡的接入微服务.

5. Hystrix是如何限流的?
    1. hystrix通过ribbon的springContext接入到每个服务之中
    2. 对于每个serviceId, hystrix设置了一个group配置, 配置了workpool的大小, 是并行度上限.
    3. 对于每个请求, 包装在一个HystrixCommand里面, 使用observer流式编程, 包装了一个执行链条.
    4. hystrixCommand放到workPool里面执行, 就起到了限流的作用, 执行链条相关的每一个serviceId有一个circuitBreaker, 起到熔断,
        执行链条内包装了降级的执行.

6. Eureka多级缓存导致的时效差?
    Eureka里面查询有一个两级缓存, 包装了每一个key的响应. EurekaPeer之间同步, 有一个三级缓存队列, 包装多个request成一个package.
    1. 第一层读写缓存其实是和registry同步的, 没有时差, 每次registry修改后都会失效这层缓存, 用的是google的一个工具Map.
    2. 第二层缓存对每一个key有一个30s的过期缓存, 所以查询里缓存导致的时差主要是这30s.
    3. peer同步的package打包三级缓存, 主要是队列, 有package的request条数和过期时间的限制, 应该是500ms一个batch.

7. spring-cloud-netflix有些功能比较老, 为什么不用spring-cloud-alibaba?
    稳定, netflix退出之后, 也更倾向于用spring-cloud官方的组件: https://i0.hdslb.com/bfs/article/ed3f92808d9fde1b1de5e126c6d8fb02bb7841ee.png@942w_539h_progressive.webp
    service-discovery, circuitBreaker, openFeign, gateway, loadBalancer.

8. netflix 对比 alibaba有哪些区别?
    区别就是组件不一样.

9. nacos和eureka相比有什么不同?
    Eureka是侧重于ap的注册中心, 没有严格保证一致性, 通过过期时间+心跳+peer同步(最新覆盖最老的)来保证最终一致性
    Nacos=注册中心+配置中心, 结合了MySQL实现了CP和AP

10. sentinel如何持久化降级策略的?
11. Sentinel的工作原理? 动态限流如何实现的? 和hystrix对比?

12. spring-cloud的微服务, 有灰度发布么? 平时是怎么发布的?
    可以通过zuul网关的转发策略, 来实现灰度发布, eureka的metamata里面配置服务的键值对.
    版本发布:
        1. 优雅关闭:
            1. actuator的shutdown命令, 取消注册, JDK的shutdownHook, 直接kill-15容器.
                都是向jvm发出shutdown命令\
            2. spring注册shutdownHook, 注册一个监听器线程, 满足条件时执行doClose方法, 关闭spring, jvm就关闭了.

13. Feign的执行过程? 为什么默认参数有问题?
    执行过程:
        1. 嵌入Spring-Boot体系: 为每一个serviceId配置一个springContext, 里面配置这feignClient的配置参数.
        2. spring启动: 扫描@FeignClient注解, 通过配置的serviceId的spring配置, 为每一个接口生成一个动态代理InvocationHandler.
        3. 在执行调用的时候, 请求通过对应的动态代理, 通过spring里面为serviceId配置的Ribbon的ILoadBalacener, 里面包装了zoneAwareEurekaClient, 可以拿到目标地址
        4. ribbon的encoder和decoder, 包装好请求, 最后通过HttpClient发出去, 接收.
    默认参数:
        超时时间太短, 默认懒加载, 初次调用都会启动一个spring, 可能会超时.

14. 线上微服务部署, 一台机器负载过高, 如何处理?
    1. 先确定是CPU还是IO飙高: top命令查看CPU, 内存负载, iostat: 磁盘负载.
    2. jstack 查看JVM进程的飙高的线程栈

15. 什么系统调用了第三方系统? 如何设计对接第三方系统?
    翼支付:
        1. 大数据的白名单系统
        2. 营销的返利系统
        3. 中间件系统: MySQL, Kafka.
    花旗:
        1. 流式服务主要对接上下游的sink和客户需求, 不太依赖第三方系统
        2. Kafka MQ通讯
        3. 查询服务: Redis, ES, HBase之类的数据存储系统.
    如何对接第三方系统?
        1. 尽量通用的设计对接逻辑, 多使用代理模式和门面模式
        2. 文档: API接口 / MQ的DTP文档
            1. 通讯协议: HTTP(Restful), WebSocket, MQ
            2. 请求类型: 参数含义, 类型
            3. 加密校验
        3. 代码实现:
            1. 日志记录好
            2. 重试/限流/熔断机制

16. 分布式事务解决方案? 各自的区别和适用场景?
    1. 强一致性:
        xa/jta规范: 2PC(MySQL), 3PC, JTA规范(Atomikos框架)
    2. 最终一致性:
        TCC: 面向业务的最终一致性方案, 2pc是面向资源层面. 需要自定义.
        可靠消息最终一致性方案: 最常用的, 最方便的.
        可靠消息表:  起始kafka可靠, 业务的消息消费起来不太麻烦, 类似于可靠消息最终一致性方案.
        最大努力通知: 不是事务的事物, 没有回滚
        saga方案: 分布式链式事务方案, 把长事务拆分多个子事务.

17. 具体讲一下可靠消息服务是如何实现的?
    可靠消息最终一致性方案里面, producer把消息交给可靠消息服务, 然后由可靠消息服务保证消息的发送和ACK消费成功.
    根据可靠消息服务的角色目标, 可以实现一个服务, 类似本地消息表的服务, 把消息表固化下来, 并做好异常捕捉和充实策略, 确保消息投递到MQ, 并接受consumer的ack响应.
    RocketMQ本身实现了这个角色的功能, Kafka没有实现事务, 但可以根据ack和kafka配置, 来做到at-least-once, 做到类似, 但是没有回滚.

18. 如果可靠消息服务挂掉了, 上下游如何处理? 如何保证可靠消息服务的高可用?
    可靠消息服务挂掉了, Producer, Consumer肯定要做降级.
    Producer可以直接调用consumer, 采用TCC方案.

19. 分布式锁的方案有哪些? 什么应用场景?
    分布式锁方案就是把锁的竞争场景扩大到不同的JVM里面.
    1. 竞争共享缓存里面的state: redis锁实现.
    2. 竞争队列里的Leader: zk队列锁实现.
    3. 总之就是一个共享的规则, 能达成一致性, 区分出第一. 比如paxos协议.

20. ZK分布式锁和redis分布式锁的区别?
    一种是state模式的, 共享资源的抢占
    一种是队列排队选leader. paxos的multi实现方案
    总体来说, 都是一主概念, 都是paxos.

21. ZK如何实现分布式锁?
    基于multi-paxos实现的zk集群, 利用临时队列的数据结构, 选出leader.
    利用session管理来了维护锁过期, watcher来实现通知功能. redis用的是channel.

22. Redis如何保证锁过期后不互斥? 或者主从集群所丢失问题?
    单体redis: redis单线程的工作模式, 只处理一个抢锁命令, 不会出现互斥.
        redisson使用hash存储锁对象, 并用其他的结构来维护过期时间.
        如果redis挂掉重启, 只能依靠AOF日志来恢复锁对象, 否则就会造成丢失, 出现锁互斥.
    redis集群: redlock算法, paxos算法的变种, 过半写.
    主从redis锁丢失问题: redlock了, redission的multiLock.


### MySQL

1. 有没有做分库分表? 主键生成策略是什么?
    1. 默认自增ID+分表键索引: 我们的任务表就是这样, 平时只用分表键索引(订单ID)
        缺点: 每次都要回表操作, 性能会折中. 订单ID不是递增的, 插入可能造成拆分索引页, 降低性能.
    2. 对于Hash分表, 可以用间隔递增的主键ID.
        就是扩容麻烦, 尽量不用.
    3. 全局递增ID: leaf实现: 依赖DB, 每次分拨一个号段.
    4. UUID: 比较慢.
    5. 全局唯一, 趋势递增的snowflake算法: 把32位id拆分多个意义, 分别安排, 减少碰撞
    6. redis自增也不错.

2. SnowFlake算法的问题是什么? 如何解决?
    snowflake通过时间戳来避免对内存和数据库的依赖, 所以它依赖于服务器的时间, 如果时间重播, 会造成大量的重复.
    中下位和末尾bit数限制, 每毫秒生成的ID上线有限制, 而且时间戳位41位bit, 最多用70年.
    解决方案:
        1. bit位分配优化: 薄雾算法, 时间戳+随机数, 在某些场景会有更好效果.
        2. 当回拨时间小于15ms, 就等时间追上来之后继续生成, 当时间大于15ms时间我们通过更换workid来产生之前都没有产生过的来解决回拨问题.
        3. uid-generator, 批量取用.

3. 分库分表后有什么问题? 你们如何进行DDL操作?
    水平分库的问题:
        1. 分布式全局唯一ID: snowflake算法就足够.
        2. 分片字段选取: 按照业务场景看, 用户表就用用户ID, 任务表就用timestamp.
        3. 数据迁移, 扩容: 只有hash分表的时候需要, 动态扩容
            1. 规划时候搞多张表.
            2. 双写双读, 动态扩容.
        4. 跨表分页, join..:
            只能是service层自己聚合整理.
    垂直分库带来问题:
        1. 跨库join问题:
            冗余字段
            全局表/中间表
            service层自己处理
            导入ES
        2. 跨库事务问题:
            分布式事务
            锁
    DDL操作:
        1. 建立测试表, 模拟测试数据, 测试风险延迟.
        2. inplace: 尽量增加字段, 建议.
        3. copy: 创建新的表, 拷贝. 会造成大量IO.

4. 分库分表的中间件有哪些? 如何技术选型? 单表如何迁移到分库分表? 分库分表扩容如何做?
    应用层依赖类的中间件:
        sharding-jdbc: ShardingSphere, 关系型数据库中间件. 支持XA强一致事务. jdbc层面做库表关联.
            缺点是: 代码开发工作量, 侵入性. 程序员透明.
    中间层代理类的中间件:
        阿里cobar
        mycat: 独立部署
    技术选型:
        1. 可扩展性
        2. 项目成熟度
    单表迁移到分库分表:
        就是上面的ddl操作inplace增加操作, copy操作.
    分库分表扩容:
        双读双写过度

5. 分库分表后, 如何处理报表数据的跨表查询? 如何快速? 减少跨库查询次数?
    使用channel+ES来实现.
    跨表查询次数减少: 使用中间表/冗余字段

6. 水平分表和垂直分表适应什么场景? 什么情况做分库?
    水平分表适合数据量大的, 订单表.
    垂直分表, 适合字段多的数据, 冷热字段分离, 比如用户属性表之类的. 减少数据页刷新.

7. 分库分表时, 分片键有多个该如何去做?
    sharding-jdbc里面有多种分盘策略: 标准分片(正常的范围查询), 复合分片(支持多个分片键操作), 行表达式分片(使用groovy表达式), Hint分片(无需指定分片键, 由外部指定)
    复合分片: 实现 ComplexKeysShardingAlgorithm 接口, 重新 doSharding()方法.

8. 数据量最大的表是什么表? 存储什么数据? 这么大的数据量如何存储? 如何优化查询?
    用户任务表, 按月为维度, 大概在1000w内.
    按照月存储, 拒绝分页查询.

9. MySQL读写分离工作原理有了解么? 什么业务做得读写分离? 为什么要做读写分离? 遇到了什么瓶颈?
    基于binlog的数据同步, 然后增加qps.
    查多写少的, 因为写大概相当于10X的查压力.

10. MySQL如何保证高可用? 什么方式进行主从数据库数据同步?
    1. 主从同步
    2. 主主半同步, keepalived软件
    3. MySQL cluster部署方案: 使用NDB存储引擎备份冗余数据, 麻烦.

11. MySQL日志有哪些? 分别做什么用? 如果你做一个MySQL的告警系统该如何设计? (索引失效导致慢SQL, 大事务, 死锁等场景)
    主要有三种:
        1. binlog: 为了实现主从同步, 增量备份log
        2. redo-log: 是innodb引擎的DR日志, 配合binlog来保证事务提交后的数据安全安全
        3. undo-log: 是innodb引擎的事务回滚日志.
    告警监控:
        1. 主机健康状态监控: IO, 网络, 磁盘, 内存, 京城.
        2. 数据库健康信息: Error log(运行时报错), 复制状态,
        3. 性能状态: 压力
        我觉得可以使用prometheus来监控metrics, 实在不行二次开发一下接口提供metrics.

12. MySQL的索引类型是什么? 三层索引大概能支持多少索引数据?
    innodb用的是B+树索引, 按照数据也的存储地方, 分为聚簇索引和非聚簇索引.
    三层索引, 如果是聚簇索引, 那么有两层是纯索引, 可以按照索引头的长度和页大小来计算,

13. MySQL的索引结构是什么样的? 有做过SQL优化么? 如何优化SQL?
    SQL优化: 主要是对索引的更合理使用.
    explain:
        1. id, select-type+table来确定对那个表的简单/主次/union查询.
        2. possible_keys: 命中索引
        3. type, key, key_len: 最终选中的索引和索引类型
        4. ref: 要查询索引目标值
        5. rows, filters: 预计要扫描的条数, 和符合要求的比例
        6. extra: 额外信息,

14. undoLog, redoLog, binLog的作用?
    上面说了.

15. MySQL buffer pool的结构, 脏页的概念? 如何保证已经提交事务的数据不丢失?
    innodb里面的缓存区, 128M一个, 可分配多个, 独立存储16k的缓存数据页.
    1. 根据数据页的指针, 组合成多个链表:
        1. free链表, 存储空闲的缓存页
        2. flush链表, 存储脏数据页
        3. 链表的LRU算法优化: 前63%为热数据, 热数据前25%不会频繁每次移动, 第一次加载放在冷数据头部, 冷数据页面在1000ms后会访问放在热数据.
    提交事务后的数据安全:
        redo-log+binlog


### 消息队列
1. 消息队列适用场景有哪些? 如何做技术选型?
    任何对及时性要求不高的, 对

2. 如何保证消息不丢失何不重复消费?


3. 你使用MQ的业务场景是什么?


4. RocketMQ的架构能说一下么? RocketMQ的顺序性如何保证?


5. Kafka架构能说一下么? kafka的顺序性如何保证?


6. 如何去设计一个消息中间件?
    1. 要考虑消息中间件的功能, 要不要保证2PC/TCC事务, 要不要做exactlyOnce, 要不要做回撤流/延时队列/死信队列.
    2. 在考虑消息中间为了达到功能的设计

7. 平时使用消息中间件时, 要考虑什么问题? 事务消息如何设计?
    保证消息发送/消费的可靠性, 不要漏掉, 异常要好好展示出来.


8. MY集群如何部署? 什么配置? QPS多少? 有没有出现消息积压?
    部署集群: Kafka的4台机器, 32核64G
    消息积压: 有, 但平时会重新消费, 会提供一段时间的过时数据.

9. 消息挤压后如何排查? 如何解决积压?


10. RocketMQ的延时消息如何自定义延时时间?


11. Kafka可以使用延时消息么?
    好像不提供, 但是可以模拟RocketMQ的多队列模式.??


12. Kafka Consumer端如何去消费消息? 什么时候触发rebalance?


13. Kafka副本之间如何同步消息?
    一旦有了FollowerPartition之后, 会启动一个线程池, 默认好像是2个线程, 会按照leader所在的broker为例度, 整理好所有的followerPartition
    和leader在的broker建立连接, 发送fetch请求, 把自己的leo,HW发送出去, 一次请求1MB.
    leader partition所在的broker按照reactor nio模式接收请求, 然后类似消费者的处理, 只是会响应partition的数据, 在时间轮里注册事件, 更新HW.


### 缓存架构
1. 常用的Redis存储结构有哪些? 说一下zset数据结构是什么?
    5种数据类型: (string, set, zset, list, hash)
    存储结构: 每种数据类型都不只有一种存储结构, 可以在代码的命令里面看一下具体用的什么存储结构
        1. string: 存储long直接用obj头, sds,
        2. set: 压缩列表, ?
        3. zset: 压缩列表, 跳表
        4. list: 压缩列表, ?
        4. hash: 压缩列表, 字典

2. Redis数据备份如何做的?


3. Redis集群挂掉, 如何应对, 如何监控Redis集群健康?

4. Redis cluster hash槽的概念?

5. Redis Cluster节点之间的通讯机制?
    gossip协议

6. RedisCluster从节点选举流程是如何进行的?

7. Redis默认的回收算法是什么? 如何理解?

8. Redis缓存一致性里的 cache aside pattern模式的意义是什么?

9. Redis高并发情况就下如何解决缓存一致性的问题? 还能用cache-aside-pattern模式么?

10. redis高并发情况下缓存一致性解决方案有哪些?

11. redis高并发, 异步串行化解决缓存一致性方案需要注意什么问题?


12. redis如何部署的? 多级缓存下, 缓存一致性问题如何解决?


13. 你们项目里缓存里存储什么数据? 数据量有多少?

14. 使用缓存需要注意的问题有哪些?
    首先是数据一致性问题
    然后是缓存的雪崩/击穿/穿透问题
    最后是缓存的HA, 降级方案

15. 为什么会存在BigKey问题? 如何定义一个key是BigKey?


16. 多层缓存架构师如何设计的? 多层缓存架构需要注意什么?


17. Ehcache缓存的数据量特别大如何处理?

18. 如果进行动态扩容, 新旧数据不在一个JVM内存里, 如何处理?
    肯定是用共享缓存啊, 要么就是分片, 要么就是统一规则.

19. 如何进行缓存预热? 热点数据如何监控?
    我们用的定时任务进行的缓存预热, 可以用MQ, 更好一点.



## 内容项目

### 秒杀架构
1. 并发抢购系统的整体业务流程? 你主要负责哪些模块的功能开发?

2. 渲染系统如何把模板推送到nginx服务器上的?

3. 系统中秒杀抢购接口URL地址的动态隐藏是如何做的?

4. 秒杀倒计时如何实现? 如何保证前后端一致?
    类似淘宝的授时接口来同步时间.
    解决方案有:

5. 前端秒杀如何防止刷单?
    用户白名单接口+验证码, 置灰, ??


6. 秒杀过程中重复请求如何处理?

7. 秒杀库存系统如何设计的?

8. 如果有某个爆款商品, 导致顺势请求扛不住, 如何去做对应的限流策略? 如何限流?
    后端之前的全流程限流

9. 如何设计一个非公平性的秒杀活动?
    利用nginx的lua脚本+后端分数服务?

10. 秒杀系统如何解决超卖问题?
    就是扣减库存要准确, 同时也要保证DR恢复. ??? dr恢复如何做??

11. 秒杀系统中你的服务器, 中间件的配置, 多少台机器, 抗多少并发? 接口延时多少?


12. Redis原子性操作使用什么实现的? 为什么可以实现原子操作?
    redis 单线程+任务队列+lua



### 小文件存储系统

1. 详细介绍一下文件存储系统的架构, 你这样设计的原因是什么?

2. 自研的分布式文件系统带来的收益有哪些?
    主要是运维, 自定义功能, 性能稍微好些.

3. 小文件存储系统对比FastDFS, 好的地方有哪些? 读写数据响应时间是多少?


4. 直到FastDFS为什么会丢失图片么? 丢失率有多少?

5. NameNode节点如果挂掉, 如何高可用?

6. 使用多台NameNode, 元数据如何同步?
    ??

7. 你们现在目录树大概占多少内存? 每次传输fsimage大小是多少?

8. 目录树特别大时候, 元数据如何遍历?

9. DataNode有多少台, 每台的磁盘空间多大? 如何进行扩容? 现在存储数据量有多少啊?

10. 客户端上传图片到DataNode时候, 如果副本上传失败如何处理?

11. 如果因为磁盘损坏, 导致副本丢失, 如何进行恢复?

12. DataNode如何对存储文件进行重平衡rebalance的?

13. 你们上传文件的大小限制是多少? 如果上传文件大小超过了操作系统读写缓冲区的限制, 该如何解决?

14. 为什么不直接使用grpc的流上传文件? 自定义协议的好处是什么?

15. 自定义协议需要注意些什么? 如何解决粘包和拆包的问题?

16. 能解释一下Reactor网络模型如何实现?
    三种reactor模型的实现方式


### IM系统
1. 说一下你们IM系统的整体流程?

2. IM系统使用什么去开发的? 能将一下长连接锻炼重连具体怎么做的?

3. 发送数据时用什么协议? 粘包拆包使用哪种方式解决? 如何做的?

4. 能说一下分发层的作用?

5. 发送一个消息时候, 对方不在线的时候, 离线消息如何存储?
    是不是还要过期?


6. 当用户上线时, 如何拉取离线消息?

7. 整个系统的ack机制如何去做的?

8. 整个系统都是你一个人完成的么? 负责哪些模块?

9. 目前系统并发量是多少? 接入层和并发曾分别部署多少台服务? 每台机器的配置是多少?





## 个人项目

1. 你最近做的项目的业务是什么? 主要负责哪些模块?

2. 项目的业务流程是什么? 你主要负责的业务有哪些? 实现细节有哪些?

3. 项目核心的功能有哪些?
    1. 数据订阅
    2. 数据分发
    3. 数据查询

4. 你如何评估读写业务逻辑的耗时延迟?
    1. 首先是评估:
    2. 然后是压测证明:

5. 我看你们用户量是2000万, 每天的QPS是多少? 高峰期的QPS是多少? 机器如何部署的? 配置是什么? 多少台?

6. 项目最高峰的QPS, TPS是多少? 如何计算?

7. 项目里, 你做过最具有挑战性的功能是什么? 具体的挑战性在哪里? 如何设计这个功能? 能画个流程图么?
    1. 数据预热:
    2. 内存队列:
    3. 数据一致性的测试:

8. 你如何设计重构方案? 重构过程中, 新功能喝酒功能的代码如何保证兼容性和如何去过渡的?

9. 在xxx公司这段时间, 只有这一个项目么? 还接触过其他的项目吗?
    翼支付:
        对接省公司的任务
    花旗:
        1. 订阅服务开发
        2. 微服务API数据查询服务开发
        3. 工具定制: kafka tool

### 个人
1. 你工作中角色是什么? 平时如何去学习?

2. 如果你想换一个方向和岗位, 你想做什么?
    深一点的, 后端计算机方向的

3. 什么样的工作能够给你带来成就感?

4. 你的工作是高并发场景, 但是业务没有起色, 另一个工作没有高并发场景, 但业务给公司很好, 你如何选择?

5. 为什么要离职? 对今后如何规划?
    原因:
        1.
        2.
        3.
    职业规划:






















