


介绍自己: = 你的价值, 为公司你解决什么问题？
What in it for them.

success: I have been xxx
strength: 强项, 擅长.
situation: 应用上面的应用在当前: what i am looking for is xxx 怎样在当前工作上xxxx.




### 个人情况
1. 工作角色是什么, 如何学习?


### 项目相关
1.

#### 1. 积分商城项目

#### 2. live-live高可用项目













### Java相关
1. 线程池有哪些常用的? 适用场景是什么?
    1. 定时检查的这种使用频率不高的任务: Timer, 用一个线程+DelayQueue(PriorityQueue)实现的
    2. 普通的多线程场景: ThreadPool, 7参数的: 核心线程, 最大线程数, keepalive时间+unit, 任务队列, 线程工厂, 拒绝策略.
    3. 多个定时任务, 可以用Timer的多线程版, 线程池+DelayQueue.
    4. Cache模式的线程池, 使用SynchronizedQueue, 提交任务必须有线程对接. 线程容易飙升.
2. 延迟队列的实现方式:
    1. 最小堆+JUC的lock组件: DelayQueue
    2. 时间轮:
    3. 跳表: redis的zset
    4. 分桶有序排队策略: 支持特定的延时时间段, RocketMQ的延迟队列. 设计简单
4. Kafka和Netty的时间轮实现有什么区别?
    Kafka采用多级轮, 使用DelayQueue存储轮cell, 减少了遍历次数.
    Netty采用单轮+轮数
5. JVM内存分配, 执行原理, 类加载过程
    内存分配: Heap, 虚拟机栈, 元数据区, 本地方法栈, 程序技术区.
        Heap: 存储所有的对象, 字符串常量
        虚拟机栈: 存储线程执行的私有数据, 对象指针, 表.
        元数据区: 存放在本地内存, 不属于JVM内, 存储常量, class对象..
        本地方法栈+程序计数区: native线程的栈, 线程执行进度.

    类加载过程: 加载(加载文件, 创建class对象) -> 验证(class文件规范) -> 准备:类变量分配空间, 初始null值 -> 解析:修改符号引用到直接引用 -> 初始化:创建对象 -> 使用 -> 卸载

6. 常用GC收集器? 用的什么? 对CMS有优化么? G1的工作原理?
    常用GC收集器:
        单线程: serial, serialOld
        多线程: parNew, parOld
        复合: CMS, G1
    使用: CMS+ParNew 一个组合, 或者G1
    CMS原理和优化:
        四个阶段:
            初始标记: STW, GCroot找到所有直接引用的
            并发标记: 对老年代所有对象进行gcRoot追踪
            重新标记: STW, 对第二阶段的新对象, 进行gcRoot追踪
            并发清除: 很耗时
        优化:
            取消每次FullTC的内存碎片整理: -XXCMSFullGCsBeforeCompaction=5 5次一整理
            ???
    G1的工作原理:
        雷同CMS的分代策略, 只是分region, 128mb一个, region可以动态规划到新生代, 老年代.
        通过region的区分, 可以做到预估回收的效率和价值, 做到可控STW.
        回收流程类似CMS, 使用复制算法. 而不是标记清除算法.

7. 线上机器CPU负载过高如何排查? 如何优化JVM参数
    CPU排查:
        1. 先Top查看cup最高的进程, 然后top-H查看进程占用CPU最高的线程.
        2. 使用jps查看jvm的线程状态, 使用jstack查看线程栈信息, 对应代码看一下瓶颈在哪里.
    JVM参数优化:
        1. 先找到JVM的瓶颈, 高峰时候可以用jps每秒输出, 查看各个区域的内存变化, 来估算瓶颈在哪里.
        2. 找到瓶颈后, 对应的, 把内存各个区域的大小和比例调整一下, 然后如果有GC问题就调整一下GC的清理要求, 别搞太多的损耗.
        3. 如果有OOM问题, 就dump出来, MAT分析一下, 查看堆栈和对象都是什么.

8. 线上机器不断FullGC, 如何排查?
    先用jps看对象生成速率, 和Heap各区域之间的对象满的情况
    调整各区域大小, 或者是dump一下, 看一下都是什么对象, 对照业务, 看一下如何优化.

9. 线上OOM情况? 如何排查?
    Flink平台的大state, 会因为申请堆外内存过多, 被K8s杀掉. 要调整k8s.

10. 如何让Metaspace区OOM?
    很难, 因为挪到了内存里面.
    循环创建class对象可能可以. Metaspace的空间占用达到了设定的最大值就会fullGC.




























